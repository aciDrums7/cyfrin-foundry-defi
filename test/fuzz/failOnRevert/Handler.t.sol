//* Hanlder is going to narrow down the way we call function

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import {Test, console} from "forge-std/Test.sol";
import {ERC20Mock} from "@openzeppelin/contracts/mocks/token/ERC20Mock.sol";
import {ASCEngine} from "../../../src/ASCEngine.sol";
import {AcidStableCoin} from "../../../src/AcidStableCoin.sol";
import {MockV3Aggregator} from "../../mocks/MockV3Aggregator.sol";

contract Handler is Test {
    uint256 MAX_DEPOSIT_SIZE = type(uint96).max;

    ASCEngine engine;
    AcidStableCoin asc;

    ERC20Mock weth;
    ERC20Mock wbtc;

    uint256 public timesMintIsCalled;
    address[] public usersWithCollateralDeposited;
    MockV3Aggregator public ethUsdPriceFeed;

    constructor(ASCEngine _engine, AcidStableCoin _asc) {
        engine = _engine;
        asc = _asc;

        address[] memory collateralTokens = engine.getCollateralTokensAddresses();
        weth = ERC20Mock(collateralTokens[0]);
        wbtc = ERC20Mock(collateralTokens[1]);

        ethUsdPriceFeed = MockV3Aggregator(engine.getCollateralPriceFeed(address(weth)));
    }

    //* depositCollateral <-
    //? both of the params are semi-randomly generated by Foundry
    function depositCollateral(uint256 _collateralSeed, uint256 _amountCollateral) public {
        ERC20Mock collateral = _getCollateralFromSeed(_collateralSeed);
        _amountCollateral = bound(_amountCollateral, 1, MAX_DEPOSIT_SIZE);
        vm.startPrank(msg.sender);
        collateral.mint(msg.sender, _amountCollateral);
        collateral.approve(address(engine), _amountCollateral);
        engine.depositCollateral(address(collateral), _amountCollateral);
        vm.stopPrank();
        usersWithCollateralDeposited.push(msg.sender);
    }

    //* redeemCollateral <-
    function redeemCollateral(uint256 _collateralSeed, uint256 _amountCollateral) public {
        ERC20Mock collateral = _getCollateralFromSeed(_collateralSeed);
        uint256 maxCollateralToRedeem =
            engine.getCollateralDepositedByUserAndTokenAddress(msg.sender, address(collateral));
        _amountCollateral = bound(_amountCollateral, 0, maxCollateralToRedeem);
        // vm.assume(_amountCollateral != 0);
        if (_amountCollateral == 0) {
            return;
        }
        vm.prank(msg.sender);
        engine.redeemCollateral(address(collateral), _amountCollateral);
    }

    //* mintAcid <-
    function mintAcid(uint256 _amountToMint, uint256 _addressSeed) public {
        address sender;
        if (usersWithCollateralDeposited.length != 0) {
            sender = usersWithCollateralDeposited[_addressSeed % usersWithCollateralDeposited.length];
        } else {
            return;
        }

        (uint256 totalAcidMinted, uint256 collateralValueInUsd) = engine.getAccountInformation(sender);
        int256 maxAcidToMint = int256(collateralValueInUsd / 2) - int256(totalAcidMinted); //? to keep health factor above 1
        if (maxAcidToMint <= 0) {
            return;
        }

        _amountToMint = bound(_amountToMint, 0, uint256(maxAcidToMint));
        if (_amountToMint == 0) {
            return;
        }
        vm.prank(sender);
        engine.mintAcid(_amountToMint);
        timesMintIsCalled++;
    }

    //! THIS BREAKS OUR INVARIANT TEST SUITE!
    //? It's a known bug, if the price of the collateral drops enormously, then the system brokes badly
    /* function updateCollateralPrice(uint96 _newPrice) public {
        int256 newPriceInt = int256(uint256(_newPrice));
        ethUsdPriceFeed.updateAnswer(newPriceInt);
    } */

    //* Helper functions
    function _getCollateralFromSeed(uint256 _collateralSeed) private view returns (ERC20Mock) {
        if (_collateralSeed % 2 == 0) {
            return weth;
        } else {
            return wbtc;
        }
    }
}
